// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_8K\K_Means_ip_src_Segmentation_HW.v
// Created: 2019-03-29 13:41:04
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pixelOut                      ce_out        0.001
// ctrlOut_hStart                ce_out        0.001
// ctrlOut_hEnd                  ce_out        0.001
// ctrlOut_vStart                ce_out        0.001
// ctrlOut_vEnd                  ce_out        0.001
// ctrlOut_valid                 ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: K_Means_ip_src_Segmentation_HW
// Source Path: Sementation_8K/Segmentation_HW
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module K_Means_ip_src_Segmentation_HW
          (clk,
           reset,
           clk_enable,
           pixelIn,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           ce_out,
           pixelOut,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [31:0] pixelIn;  // uint32
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  ce_out;
  output  [31:0] pixelOut;  // uint32
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire [7:0] FF_out1;  // uint8
  wire [7:0] RGB2Vector_out1_0;  // uint8
  wire [7:0] RGB2Vector_out1_1;  // uint8
  wire [7:0] RGB2Vector_out1_2;  // uint8
  wire [7:0] K_Means_out1_0;  // uint8
  wire [7:0] K_Means_out1_1;  // uint8
  wire [7:0] K_Means_out1_2;  // uint8
  wire K_Means_out2_hStart;
  wire K_Means_out2_hEnd;
  wire K_Means_out2_vStart;
  wire K_Means_out2_vEnd;
  wire K_Means_out2_valid;
  wire [31:0] Bit_Concat_out1;  // uint32


  assign FF_out1 = 8'b11111111;



  K_Means_ip_src_RGB2Vector u_RGB2Vector (.RGB(pixelIn),  // uint32
                                          .RGBVector_0(RGB2Vector_out1_0),  // uint8
                                          .RGBVector_1(RGB2Vector_out1_1),  // uint8
                                          .RGBVector_2(RGB2Vector_out1_2)  // uint8
                                          );

  K_Means_ip_src_K_Means u_K_Means (.clk(clk),
                                    .reset(reset),
                                    .enb(clk_enable),
                                    .pixelIn_0(RGB2Vector_out1_0),  // uint8
                                    .pixelIn_1(RGB2Vector_out1_1),  // uint8
                                    .pixelIn_2(RGB2Vector_out1_2),  // uint8
                                    .ctrlIn_hStart(ctrlIn_hStart),
                                    .ctrlIn_hEnd(ctrlIn_hEnd),
                                    .ctrlIn_vStart(ctrlIn_vStart),
                                    .ctrlIn_vEnd(ctrlIn_vEnd),
                                    .ctrlIn_valid(ctrlIn_valid),
                                    .pixelOut_0(K_Means_out1_0),  // uint8
                                    .pixelOut_1(K_Means_out1_1),  // uint8
                                    .pixelOut_2(K_Means_out1_2),  // uint8
                                    .ctrlOut_hStart(K_Means_out2_hStart),
                                    .ctrlOut_hEnd(K_Means_out2_hEnd),
                                    .ctrlOut_vStart(K_Means_out2_vStart),
                                    .ctrlOut_vEnd(K_Means_out2_vEnd),
                                    .ctrlOut_valid(K_Means_out2_valid)
                                    );

  assign Bit_Concat_out1 = {FF_out1, K_Means_out1_0, K_Means_out1_1, K_Means_out1_2};



  assign pixelOut = Bit_Concat_out1;

  assign ctrlOut_hStart = K_Means_out2_hStart;

  assign ctrlOut_hEnd = K_Means_out2_hEnd;

  assign ctrlOut_vStart = K_Means_out2_vStart;

  assign ctrlOut_vEnd = K_Means_out2_vEnd;

  assign ctrlOut_valid = K_Means_out2_valid;

  assign ce_out = clk_enable;

endmodule  // K_Means_ip_src_Segmentation_HW

