// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_8K\K_Means_ip_src_Comparisons.v
// Created: 2019-03-29 13:41:03
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: K_Means_ip_src_Comparisons
// Source Path: Sementation_8K/Segmentation_HW/K-Means/Comparisons
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module K_Means_ip_src_Comparisons
          (RGB_pixel_0,
           RGB_pixel_1,
           RGB_pixel_2,
           Ks_0,
           Ks_1,
           Ks_2,
           Ks_3,
           Ks_4,
           Ks_5,
           Ks_6,
           Ks_7,
           Ks_8,
           Ks_9,
           Ks_10,
           Ks_11,
           Ks_12,
           Ks_13,
           Ks_14,
           Ks_15,
           Ks_16,
           Ks_17,
           Ks_18,
           Ks_19,
           Ks_20,
           Ks_21,
           Ks_22,
           Ks_23,
           K_out_0,
           K_out_1,
           K_out_2,
           Address);


  input   signed [17:0] RGB_pixel_0;  // sfix18_En8
  input   signed [17:0] RGB_pixel_1;  // sfix18_En8
  input   signed [17:0] RGB_pixel_2;  // sfix18_En8
  input   signed [17:0] Ks_0;  // sfix18_En8
  input   signed [17:0] Ks_1;  // sfix18_En8
  input   signed [17:0] Ks_2;  // sfix18_En8
  input   signed [17:0] Ks_3;  // sfix18_En8
  input   signed [17:0] Ks_4;  // sfix18_En8
  input   signed [17:0] Ks_5;  // sfix18_En8
  input   signed [17:0] Ks_6;  // sfix18_En8
  input   signed [17:0] Ks_7;  // sfix18_En8
  input   signed [17:0] Ks_8;  // sfix18_En8
  input   signed [17:0] Ks_9;  // sfix18_En8
  input   signed [17:0] Ks_10;  // sfix18_En8
  input   signed [17:0] Ks_11;  // sfix18_En8
  input   signed [17:0] Ks_12;  // sfix18_En8
  input   signed [17:0] Ks_13;  // sfix18_En8
  input   signed [17:0] Ks_14;  // sfix18_En8
  input   signed [17:0] Ks_15;  // sfix18_En8
  input   signed [17:0] Ks_16;  // sfix18_En8
  input   signed [17:0] Ks_17;  // sfix18_En8
  input   signed [17:0] Ks_18;  // sfix18_En8
  input   signed [17:0] Ks_19;  // sfix18_En8
  input   signed [17:0] Ks_20;  // sfix18_En8
  input   signed [17:0] Ks_21;  // sfix18_En8
  input   signed [17:0] Ks_22;  // sfix18_En8
  input   signed [17:0] Ks_23;  // sfix18_En8
  output  signed [17:0] K_out_0;  // sfix18_En8
  output  signed [17:0] K_out_1;  // sfix18_En8
  output  signed [17:0] K_out_2;  // sfix18_En8
  output  [2:0] Address;  // ufix3


  wire signed [17:0] Y_Disable_out1;  // sfix18_En8
  wire signed [17:0] SAD_SSE_SW_out1;  // sfix18_En8
  wire signed [37:0] SSE9_out1;  // sfix38_En16
  wire signed [37:0] SSE13_out1;  // sfix38_En16
  wire Relational_Operator7_relop1;
  wire signed [37:0] Switch24_out1;  // sfix38_En16
  wire signed [37:0] SSE14_out1;  // sfix38_En16
  wire signed [37:0] SSE15_out1;  // sfix38_En16
  wire Relational_Operator8_relop1;
  wire signed [37:0] Switch25_out1;  // sfix38_En16
  wire Relational_Operator9_relop1;
  wire signed [37:0] Switch17_out1;  // sfix38_En16
  wire signed [37:0] SSE16_out1;  // sfix38_En16
  wire signed [37:0] SSE10_out1;  // sfix38_En16
  wire Relational_Operator10_relop1;
  wire signed [37:0] Switch22_out1;  // sfix38_En16
  wire signed [37:0] SSE11_out1;  // sfix38_En16
  wire signed [37:0] SSE12_out1;  // sfix38_En16
  wire Relational_Operator11_relop1;
  wire signed [37:0] Switch23_out1;  // sfix38_En16
  wire Relational_Operator12_relop1;
  wire signed [37:0] Switch16_out1;  // sfix38_En16
  wire Relational_Operator13_relop1;
  wire signed [17:0] Demux1_out8 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out7 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch21_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out6 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out5 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch20_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch15_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out4 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out3 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch27_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out2 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux1_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch26_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch19_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch18_out1 [0:2];  // sfix18_En8 [3]
  wire Logical_Operator13_out1;
  wire Logical_Operator3_out1;
  wire Logical_Operator4_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator5_out1;
  wire Logical_Operator12_out1;
  wire Logical_Operator2_out1;
  wire [1:0] Bit_Concat2_out1;  // ufix2
  wire Logical_Operator6_out1;
  wire Logical_Operator7_out1;
  wire Logical_Operator10_out1;
  wire Logical_Operator8_out1;
  wire Logical_Operator9_out1;
  wire Logical_Operator11_out1;
  wire [1:0] Bit_Concat1_out1;  // ufix2
  wire [1:0] Switch14_out1;  // ufix2
  wire Bit_Slice_out1;  // ufix1
  wire Bit_Slice1_out1;  // ufix1
  wire [2:0] Bit_Concat3_out1;  // ufix3


  assign Y_Disable_out1 = 18'sb000000000100000000;



  assign SAD_SSE_SW_out1 = 18'sb000000000000000000;



  K_Means_ip_src_SSE9 u_SSE9 (.In1_0(RGB_pixel_0),  // sfix18_En8
                              .In1_1(RGB_pixel_1),  // sfix18_En8
                              .In1_2(RGB_pixel_2),  // sfix18_En8
                              .In2_0(Ks_0),  // sfix18_En8
                              .In2_1(Ks_1),  // sfix18_En8
                              .In2_2(Ks_2),  // sfix18_En8
                              .Y_disable(Y_Disable_out1),  // sfix18_En8
                              .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                              .Out1(SSE9_out1)  // sfix38_En16
                              );

  K_Means_ip_src_SSE13 u_SSE13 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_3),  // sfix18_En8
                                .In2_1(Ks_4),  // sfix18_En8
                                .In2_2(Ks_5),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE13_out1)  // sfix38_En16
                                );

  assign Relational_Operator7_relop1 = SSE9_out1 <= SSE13_out1;



  assign Switch24_out1 = (Relational_Operator7_relop1 == 1'b0 ? SSE13_out1 :
              SSE9_out1);



  K_Means_ip_src_SSE14 u_SSE14 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_6),  // sfix18_En8
                                .In2_1(Ks_7),  // sfix18_En8
                                .In2_2(Ks_8),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE14_out1)  // sfix38_En16
                                );

  K_Means_ip_src_SSE15 u_SSE15 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_9),  // sfix18_En8
                                .In2_1(Ks_10),  // sfix18_En8
                                .In2_2(Ks_11),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE15_out1)  // sfix38_En16
                                );

  assign Relational_Operator8_relop1 = SSE14_out1 <= SSE15_out1;



  assign Switch25_out1 = (Relational_Operator8_relop1 == 1'b0 ? SSE15_out1 :
              SSE14_out1);



  assign Relational_Operator9_relop1 = Switch24_out1 <= Switch25_out1;



  assign Switch17_out1 = (Relational_Operator9_relop1 == 1'b0 ? Switch25_out1 :
              Switch24_out1);



  K_Means_ip_src_SSE16 u_SSE16 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_12),  // sfix18_En8
                                .In2_1(Ks_13),  // sfix18_En8
                                .In2_2(Ks_14),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE16_out1)  // sfix38_En16
                                );

  K_Means_ip_src_SSE10 u_SSE10 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_15),  // sfix18_En8
                                .In2_1(Ks_16),  // sfix18_En8
                                .In2_2(Ks_17),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE10_out1)  // sfix38_En16
                                );

  assign Relational_Operator10_relop1 = SSE16_out1 <= SSE10_out1;



  assign Switch22_out1 = (Relational_Operator10_relop1 == 1'b0 ? SSE10_out1 :
              SSE16_out1);



  K_Means_ip_src_SSE11 u_SSE11 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_18),  // sfix18_En8
                                .In2_1(Ks_19),  // sfix18_En8
                                .In2_2(Ks_20),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE11_out1)  // sfix38_En16
                                );

  K_Means_ip_src_SSE12 u_SSE12 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_21),  // sfix18_En8
                                .In2_1(Ks_22),  // sfix18_En8
                                .In2_2(Ks_23),  // sfix18_En8
                                .Y_disable(Y_Disable_out1),  // sfix18_En8
                                .SAD_SSE(SAD_SSE_SW_out1),  // sfix18_En8
                                .Out1(SSE12_out1)  // sfix38_En16
                                );

  assign Relational_Operator11_relop1 = SSE11_out1 <= SSE12_out1;



  assign Switch23_out1 = (Relational_Operator11_relop1 == 1'b0 ? SSE12_out1 :
              SSE11_out1);



  assign Relational_Operator12_relop1 = Switch22_out1 <= Switch23_out1;



  assign Switch16_out1 = (Relational_Operator12_relop1 == 1'b0 ? Switch23_out1 :
              Switch22_out1);



  assign Relational_Operator13_relop1 = Switch17_out1 <= Switch16_out1;



  assign Demux1_out8[0] = Ks_21;
  assign Demux1_out8[1] = Ks_22;
  assign Demux1_out8[2] = Ks_23;

  assign Demux1_out7[0] = Ks_18;
  assign Demux1_out7[1] = Ks_19;
  assign Demux1_out7[2] = Ks_20;

  assign Switch21_out1[0] = (Relational_Operator11_relop1 == 1'b0 ? Demux1_out8[0] :
              Demux1_out7[0]);
  assign Switch21_out1[1] = (Relational_Operator11_relop1 == 1'b0 ? Demux1_out8[1] :
              Demux1_out7[1]);
  assign Switch21_out1[2] = (Relational_Operator11_relop1 == 1'b0 ? Demux1_out8[2] :
              Demux1_out7[2]);



  assign Demux1_out6[0] = Ks_15;
  assign Demux1_out6[1] = Ks_16;
  assign Demux1_out6[2] = Ks_17;

  assign Demux1_out5[0] = Ks_12;
  assign Demux1_out5[1] = Ks_13;
  assign Demux1_out5[2] = Ks_14;

  assign Switch20_out1[0] = (Relational_Operator10_relop1 == 1'b0 ? Demux1_out6[0] :
              Demux1_out5[0]);
  assign Switch20_out1[1] = (Relational_Operator10_relop1 == 1'b0 ? Demux1_out6[1] :
              Demux1_out5[1]);
  assign Switch20_out1[2] = (Relational_Operator10_relop1 == 1'b0 ? Demux1_out6[2] :
              Demux1_out5[2]);



  assign Switch15_out1[0] = (Relational_Operator12_relop1 == 1'b0 ? Switch21_out1[0] :
              Switch20_out1[0]);
  assign Switch15_out1[1] = (Relational_Operator12_relop1 == 1'b0 ? Switch21_out1[1] :
              Switch20_out1[1]);
  assign Switch15_out1[2] = (Relational_Operator12_relop1 == 1'b0 ? Switch21_out1[2] :
              Switch20_out1[2]);



  assign Demux1_out4[0] = Ks_9;
  assign Demux1_out4[1] = Ks_10;
  assign Demux1_out4[2] = Ks_11;

  assign Demux1_out3[0] = Ks_6;
  assign Demux1_out3[1] = Ks_7;
  assign Demux1_out3[2] = Ks_8;

  assign Switch27_out1[0] = (Relational_Operator8_relop1 == 1'b0 ? Demux1_out4[0] :
              Demux1_out3[0]);
  assign Switch27_out1[1] = (Relational_Operator8_relop1 == 1'b0 ? Demux1_out4[1] :
              Demux1_out3[1]);
  assign Switch27_out1[2] = (Relational_Operator8_relop1 == 1'b0 ? Demux1_out4[2] :
              Demux1_out3[2]);



  assign Demux1_out2[0] = Ks_3;
  assign Demux1_out2[1] = Ks_4;
  assign Demux1_out2[2] = Ks_5;

  assign Demux1_out1[0] = Ks_0;
  assign Demux1_out1[1] = Ks_1;
  assign Demux1_out1[2] = Ks_2;

  assign Switch26_out1[0] = (Relational_Operator7_relop1 == 1'b0 ? Demux1_out2[0] :
              Demux1_out1[0]);
  assign Switch26_out1[1] = (Relational_Operator7_relop1 == 1'b0 ? Demux1_out2[1] :
              Demux1_out1[1]);
  assign Switch26_out1[2] = (Relational_Operator7_relop1 == 1'b0 ? Demux1_out2[2] :
              Demux1_out1[2]);



  assign Switch19_out1[0] = (Relational_Operator9_relop1 == 1'b0 ? Switch27_out1[0] :
              Switch26_out1[0]);
  assign Switch19_out1[1] = (Relational_Operator9_relop1 == 1'b0 ? Switch27_out1[1] :
              Switch26_out1[1]);
  assign Switch19_out1[2] = (Relational_Operator9_relop1 == 1'b0 ? Switch27_out1[2] :
              Switch26_out1[2]);



  assign Switch18_out1[0] = (Relational_Operator13_relop1 == 1'b0 ? Switch15_out1[0] :
              Switch19_out1[0]);
  assign Switch18_out1[1] = (Relational_Operator13_relop1 == 1'b0 ? Switch15_out1[1] :
              Switch19_out1[1]);
  assign Switch18_out1[2] = (Relational_Operator13_relop1 == 1'b0 ? Switch15_out1[2] :
              Switch19_out1[2]);



  assign K_out_0 = Switch18_out1[0];

  assign K_out_1 = Switch18_out1[1];

  assign K_out_2 = Switch18_out1[2];

  assign Logical_Operator13_out1 =  ~ Relational_Operator13_relop1;



  assign Logical_Operator3_out1 =  ~ Relational_Operator12_relop1;



  assign Logical_Operator4_out1 =  ~ Relational_Operator10_relop1;



  assign Logical_Operator1_out1 = Logical_Operator4_out1 & Relational_Operator12_relop1;



  assign Logical_Operator5_out1 =  ~ Relational_Operator11_relop1;



  assign Logical_Operator12_out1 = Logical_Operator3_out1 & Logical_Operator5_out1;



  assign Logical_Operator2_out1 = Logical_Operator1_out1 | Logical_Operator12_out1;



  assign Bit_Concat2_out1 = {Logical_Operator3_out1, Logical_Operator2_out1};



  assign Logical_Operator6_out1 =  ~ Relational_Operator9_relop1;



  assign Logical_Operator7_out1 =  ~ Relational_Operator7_relop1;



  assign Logical_Operator10_out1 = Logical_Operator7_out1 & Relational_Operator9_relop1;



  assign Logical_Operator8_out1 =  ~ Relational_Operator8_relop1;



  assign Logical_Operator9_out1 = Logical_Operator6_out1 & Logical_Operator8_out1;



  assign Logical_Operator11_out1 = Logical_Operator10_out1 | Logical_Operator9_out1;



  assign Bit_Concat1_out1 = {Logical_Operator6_out1, Logical_Operator11_out1};



  assign Switch14_out1 = (Relational_Operator13_relop1 == 1'b0 ? Bit_Concat2_out1 :
              Bit_Concat1_out1);



  assign Bit_Slice_out1 = Switch14_out1[1];



  assign Bit_Slice1_out1 = Switch14_out1[0];



  assign Bit_Concat3_out1 = {Logical_Operator13_out1, Bit_Slice_out1, Bit_Slice1_out1};



  assign Address = Bit_Concat3_out1;

endmodule  // K_Means_ip_src_Comparisons

