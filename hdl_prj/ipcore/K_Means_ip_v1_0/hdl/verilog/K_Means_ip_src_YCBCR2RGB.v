// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_8K\K_Means_ip_src_YCBCR2RGB.v
// Created: 2019-03-29 13:41:03
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: K_Means_ip_src_YCBCR2RGB
// Source Path: Sementation_8K/Segmentation_HW/K-Means/Color Space Converter1/YCBCR2RGB
// Hierarchy Level: 3
// 
// YCbCr to RGB Converter
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module K_Means_ip_src_YCBCR2RGB
          (clk,
           reset,
           enb,
           Y,
           Cb,
           Cr,
           hStartIn,
           hEndIn,
           vStartIn,
           vEndIn,
           validIn,
           R,
           G,
           B,
           hStartOut,
           hEndOut,
           vStartOut,
           vEndOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] Y;  // uint8
  input   [7:0] Cb;  // uint8
  input   [7:0] Cr;  // uint8
  input   hStartIn;
  input   hEndIn;
  input   vStartIn;
  input   vEndIn;
  input   validIn;
  output  [7:0] R;  // uint8
  output  [7:0] G;  // uint8
  output  [7:0] B;  // uint8
  output  hStartOut;
  output  hEndOut;
  output  vStartOut;
  output  vEndOut;
  output  validOut;


  wire Mux1Sel2;
  wire Mux1Sel1;
  wire [7:0] ConsMin1;  // uint8
  wire [7:0] SwitchOut11;  // uint8
  wire [7:0] ConsMax1;  // uint8
  wire [7:0] SwitchOut21;  // uint8
  reg [7:0] In1Reg;  // uint8
  wire Mux2Sel2;
  wire Mux2Sel1;
  wire [7:0] ConsMin2;  // uint8
  wire [7:0] SwitchOut12;  // uint8
  wire [7:0] ConsMax2;  // uint8
  wire [7:0] SwitchOut22;  // uint8
  reg [7:0] In2Reg;  // uint8
  wire Mux3Sel2;
  wire Mux3Sel1;
  wire [7:0] ConsMin3;  // uint8
  wire [7:0] SwitchOut13;  // uint8
  wire [7:0] ConsMax3;  // uint8
  wire [7:0] SwitchOut23;  // uint8
  reg [7:0] In3Reg;  // uint8
  reg  hStartInReg;
  reg  hEndInReg;
  reg  vStartInReg;
  reg  vEndInReg;
  reg  validInReg;


  assign Mux1Sel2 = Y > 8'b11101011;



  assign Mux1Sel1 = Y < 8'b00010000;



  assign ConsMin1 = 8'b00010000;



  assign SwitchOut11 = (Mux1Sel1 == 1'b0 ? Y :
              ConsMin1);



  assign ConsMax1 = 8'b11101011;



  assign SwitchOut21 = (Mux1Sel2 == 1'b0 ? SwitchOut11 :
              ConsMax1);



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        In1Reg <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In1Reg <= SwitchOut21;
        end
      end
    end



  assign Mux2Sel2 = Cb > 8'b11110000;



  assign Mux2Sel1 = Cb < 8'b00010000;



  assign ConsMin2 = 8'b00010000;



  assign SwitchOut12 = (Mux2Sel1 == 1'b0 ? Cb :
              ConsMin2);



  assign ConsMax2 = 8'b11110000;



  assign SwitchOut22 = (Mux2Sel2 == 1'b0 ? SwitchOut12 :
              ConsMax2);



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        In2Reg <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In2Reg <= SwitchOut22;
        end
      end
    end



  assign Mux3Sel2 = Cr > 8'b11110000;



  assign Mux3Sel1 = Cr < 8'b00010000;



  assign ConsMin3 = 8'b00010000;



  assign SwitchOut13 = (Mux3Sel1 == 1'b0 ? Cr :
              ConsMin3);



  assign ConsMax3 = 8'b11110000;



  assign SwitchOut23 = (Mux3Sel2 == 1'b0 ? SwitchOut13 :
              ConsMax3);



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        In3Reg <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In3Reg <= SwitchOut23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        hStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartInReg <= hStartIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        hEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndInReg <= hEndIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        vStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartInReg <= vStartIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_6_process
      if (reset == 1'b1) begin
        vEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndInReg <= vEndIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_7_process
      if (reset == 1'b1) begin
        validInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          validInReg <= validIn;
        end
      end
    end



  K_Means_ip_src_YCbCr2RGBCore u_ycbcr2rgbCore_inst (.clk(clk),
                                                     .reset(reset),
                                                     .enb(enb),
                                                     .Y(In1Reg),  // uint8
                                                     .Cb(In2Reg),  // uint8
                                                     .Cr(In3Reg),  // uint8
                                                     .hStartIn(hStartInReg),
                                                     .hEndIn(hEndInReg),
                                                     .vStartIn(vStartInReg),
                                                     .vEndIn(vEndInReg),
                                                     .validIn(validInReg),
                                                     .R(R),  // uint8
                                                     .G(G),  // uint8
                                                     .B(B),  // uint8
                                                     .hStartOut(hStartOut),
                                                     .hEndOut(hEndOut),
                                                     .vStartOut(vStartOut),
                                                     .vEndOut(vEndOut),
                                                     .validOut(validOut)
                                                     );

endmodule  // K_Means_ip_src_YCBCR2RGB

