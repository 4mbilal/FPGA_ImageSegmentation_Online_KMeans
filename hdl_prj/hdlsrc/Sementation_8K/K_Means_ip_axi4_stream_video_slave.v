// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_8K\K_Means_ip_axi4_stream_video_slave.v
// Created: 2019-03-29 13:41:20
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: K_Means_ip_axi4_stream_video_slave
// Source Path: K_Means_ip/K_Means_ip_axi4_stream_video_slave
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module K_Means_ip_axi4_stream_video_slave
          (clk,
           reset,
           enb,
           AXI4_Stream_Video_Slave_TDATA,
           AXI4_Stream_Video_Slave_TVALID,
           AXI4_Stream_Video_Slave_TLAST,
           AXI4_Stream_Video_Slave_TUSER,
           auto_ready,
           write_axi4_stream_video_slave_image_width,
           write_axi4_stream_video_slave_image_height,
           write_axi4_stream_video_slave_hporch,
           write_axi4_stream_video_slave_vporch,
           AXI4_Stream_Video_Slave_TREADY,
           user_pixel,
           user_ctrl_hStart,
           user_ctrl_hEnd,
           user_ctrl_vStart,
           user_ctrl_vEnd,
           user_ctrl_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [31:0] AXI4_Stream_Video_Slave_TDATA;  // ufix32
  input   AXI4_Stream_Video_Slave_TVALID;  // ufix1
  input   AXI4_Stream_Video_Slave_TLAST;  // ufix1
  input   AXI4_Stream_Video_Slave_TUSER;  // ufix1
  input   auto_ready;  // ufix1
  input   [12:0] write_axi4_stream_video_slave_image_width;  // ufix13
  input   [12:0] write_axi4_stream_video_slave_image_height;  // ufix13
  input   [12:0] write_axi4_stream_video_slave_hporch;  // ufix13
  input   [12:0] write_axi4_stream_video_slave_vporch;  // ufix13
  output  AXI4_Stream_Video_Slave_TREADY;  // ufix1
  output  [31:0] user_pixel;  // ufix32
  output  user_ctrl_hStart;  // ufix1
  output  user_ctrl_hEnd;  // ufix1
  output  user_ctrl_vStart;  // ufix1
  output  user_ctrl_vEnd;  // ufix1
  output  user_ctrl_valid;  // ufix1


  reg  adapter_in_enable;  // ufix1
  reg  fifo_rd_ack;  // ufix1
  wire stream_in_user_eol;  // ufix1
  wire stream_in_user_sof;  // ufix1
  wire fifo_empty;  // ufix1
  wire fifo_empty_neg;  // ufix1
  wire stream_in_user_valid;  // ufix1
  wire [31:0] stream_in_user_data;  // ufix32
  wire adapter_in_valid_out;  // ufix1
  wire adapter_in_ready_out;  // ufix1
  wire stream_in_user_ready;  // ufix1
  wire fifo_full;  // ufix1


  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        adapter_in_enable <= 1'b0;
      end
      else begin
        if (enb) begin
          adapter_in_enable <= auto_ready;
        end
      end
    end



  K_Means_ip_fifo_eol u_K_Means_ip_fifo_eol_inst (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .In(AXI4_Stream_Video_Slave_TLAST),  // ufix1
                                                  .Push(AXI4_Stream_Video_Slave_TVALID),  // ufix1
                                                  .Pop(fifo_rd_ack),  // ufix1
                                                  .Out(stream_in_user_eol)  // ufix1
                                                  );

  K_Means_ip_fifo_sof u_K_Means_ip_fifo_sof_inst (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .In(AXI4_Stream_Video_Slave_TUSER),  // ufix1
                                                  .Push(AXI4_Stream_Video_Slave_TVALID),  // ufix1
                                                  .Pop(fifo_rd_ack),  // ufix1
                                                  .Out(stream_in_user_sof)  // ufix1
                                                  );

  assign fifo_empty_neg =  ~ fifo_empty;



  assign stream_in_user_valid = fifo_empty_neg & fifo_rd_ack;



  K_Means_ip_adapter_in u_K_Means_ip_K_Means_ip_axi4_stream_video_slave_K_Means_ip_adapter_in (.clk(clk),
                                                                                               .reset(reset),
                                                                                               .stream_in_user_data(stream_in_user_data),  // ufix32
                                                                                               .stream_in_user_valid(stream_in_user_valid),  // ufix1
                                                                                               .stream_in_user_sof(stream_in_user_sof),  // ufix1
                                                                                               .stream_in_user_eol(stream_in_user_eol),  // ufix1
                                                                                               .image_width(write_axi4_stream_video_slave_image_width),  // ufix13
                                                                                               .image_height(write_axi4_stream_video_slave_image_height),  // ufix13
                                                                                               .hporch(write_axi4_stream_video_slave_hporch),  // ufix13
                                                                                               .vporch(write_axi4_stream_video_slave_vporch),  // ufix13
                                                                                               .adapter_in_enable(adapter_in_enable),  // ufix1
                                                                                               .user_pixel(user_pixel),  // ufix32
                                                                                               .user_ctrl_hStart(user_ctrl_hStart),  // ufix1
                                                                                               .user_ctrl_hEnd(user_ctrl_hEnd),  // ufix1
                                                                                               .user_ctrl_vStart(user_ctrl_vStart),  // ufix1
                                                                                               .user_ctrl_vEnd(user_ctrl_vEnd),  // ufix1
                                                                                               .adapter_in_valid_out(adapter_in_valid_out),  // ufix1
                                                                                               .adapter_in_ready_out(adapter_in_ready_out)  // ufix1
                                                                                               );

  assign stream_in_user_ready = auto_ready & adapter_in_ready_out;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        fifo_rd_ack <= 1'b0;
      end
      else begin
        if (enb) begin
          fifo_rd_ack <= stream_in_user_ready;
        end
      end
    end



  K_Means_ip_fifo_data u_K_Means_ip_fifo_data_inst (.clk(clk),
                                                    .reset(reset),
                                                    .enb(enb),
                                                    .In(AXI4_Stream_Video_Slave_TDATA),  // ufix32
                                                    .Push(AXI4_Stream_Video_Slave_TVALID),  // ufix1
                                                    .Pop(fifo_rd_ack),  // ufix1
                                                    .Out(stream_in_user_data),  // ufix32
                                                    .Empty(fifo_empty),  // ufix1
                                                    .Full(fifo_full)  // ufix1
                                                    );

  assign AXI4_Stream_Video_Slave_TREADY =  ~ fifo_full;



  assign user_ctrl_valid = adapter_in_enable & adapter_in_valid_out;



endmodule  // K_Means_ip_axi4_stream_video_slave

