// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_8K\K_Means_ip_src_K_Means.v
// Created: 2019-03-29 13:41:04
// 
// Generated by MATLAB 9.6 and HDL Coder 3.14
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: K_Means_ip_src_K_Means
// Source Path: Sementation_8K/Segmentation_HW/K-Means
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module K_Means_ip_src_K_Means
          (clk,
           reset,
           enb,
           pixelIn_0,
           pixelIn_1,
           pixelIn_2,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           pixelOut_0,
           pixelOut_1,
           pixelOut_2,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] pixelIn_0;  // uint8
  input   [7:0] pixelIn_1;  // uint8
  input   [7:0] pixelIn_2;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  [7:0] pixelOut_0;  // uint8
  output  [7:0] pixelOut_1;  // uint8
  output  [7:0] pixelOut_2;  // uint8
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire [7:0] Color_Space_Converter_out1_0;  // uint8
  wire [7:0] Color_Space_Converter_out1_1;  // uint8
  wire [7:0] Color_Space_Converter_out1_2;  // uint8
  wire Color_Space_Converter_out2_hStart;
  wire Color_Space_Converter_out2_hEnd;
  wire Color_Space_Converter_out2_vStart;
  wire Color_Space_Converter_out2_vEnd;
  wire Color_Space_Converter_out2_valid;
  wire [7:0] Color_Space_Converter_out1 [0:2];  // uint8 [3]
  wire signed [17:0] Data_Type_Conversion2_out1 [0:2];  // sfix18_En8 [3]
  wire [2:0] y;  // ufix3
  wire signed [17:0] Clustering_out1_0;  // sfix18_En8
  wire signed [17:0] Clustering_out1_1;  // sfix18_En8
  wire signed [17:0] Clustering_out1_2;  // sfix18_En8
  wire signed [17:0] Clustering_out1_3;  // sfix18_En8
  wire signed [17:0] Clustering_out1_4;  // sfix18_En8
  wire signed [17:0] Clustering_out1_5;  // sfix18_En8
  wire signed [17:0] Clustering_out1_6;  // sfix18_En8
  wire signed [17:0] Clustering_out1_7;  // sfix18_En8
  wire signed [17:0] Clustering_out1_8;  // sfix18_En8
  wire signed [17:0] Clustering_out1_9;  // sfix18_En8
  wire signed [17:0] Clustering_out1_10;  // sfix18_En8
  wire signed [17:0] Clustering_out1_11;  // sfix18_En8
  wire signed [17:0] Clustering_out1_12;  // sfix18_En8
  wire signed [17:0] Clustering_out1_13;  // sfix18_En8
  wire signed [17:0] Clustering_out1_14;  // sfix18_En8
  wire signed [17:0] Clustering_out1_15;  // sfix18_En8
  wire signed [17:0] Clustering_out1_16;  // sfix18_En8
  wire signed [17:0] Clustering_out1_17;  // sfix18_En8
  wire signed [17:0] Clustering_out1_18;  // sfix18_En8
  wire signed [17:0] Clustering_out1_19;  // sfix18_En8
  wire signed [17:0] Clustering_out1_20;  // sfix18_En8
  wire signed [17:0] Clustering_out1_21;  // sfix18_En8
  wire signed [17:0] Clustering_out1_22;  // sfix18_En8
  wire signed [17:0] Clustering_out1_23;  // sfix18_En8
  wire signed [17:0] Comparisons_out1_0;  // sfix18_En8
  wire signed [17:0] Comparisons_out1_1;  // sfix18_En8
  wire signed [17:0] Comparisons_out1_2;  // sfix18_En8
  wire signed [17:0] Comparisons_out1 [0:2];  // sfix18_En8 [3]
  wire [7:0] Data_Type_Conversion1_out1 [0:2];  // uint8 [3]
  wire [7:0] Color_Space_Converter1_out1_0;  // uint8
  wire [7:0] Color_Space_Converter1_out1_1;  // uint8
  wire [7:0] Color_Space_Converter1_out1_2;  // uint8
  wire Color_Space_Converter1_out2_hStart;
  wire Color_Space_Converter1_out2_hEnd;
  wire Color_Space_Converter1_out2_vStart;
  wire Color_Space_Converter1_out2_vEnd;
  wire Color_Space_Converter1_out2_valid;


  K_Means_ip_src_Color_Space_Converter u_Color_Space_Converter (.clk(clk),
                                                                .reset(reset),
                                                                .enb(enb),
                                                                .in0_0(pixelIn_0),  // uint8
                                                                .in0_1(pixelIn_1),  // uint8
                                                                .in0_2(pixelIn_2),  // uint8
                                                                .in1_hStart(ctrlIn_hStart),
                                                                .in1_hEnd(ctrlIn_hEnd),
                                                                .in1_vStart(ctrlIn_vStart),
                                                                .in1_vEnd(ctrlIn_vEnd),
                                                                .in1_valid(ctrlIn_valid),
                                                                .out0_0(Color_Space_Converter_out1_0),  // uint8
                                                                .out0_1(Color_Space_Converter_out1_1),  // uint8
                                                                .out0_2(Color_Space_Converter_out1_2),  // uint8
                                                                .out1_hStart(Color_Space_Converter_out2_hStart),
                                                                .out1_hEnd(Color_Space_Converter_out2_hEnd),
                                                                .out1_vStart(Color_Space_Converter_out2_vStart),
                                                                .out1_vEnd(Color_Space_Converter_out2_vEnd),
                                                                .out1_valid(Color_Space_Converter_out2_valid)
                                                                );

  assign Color_Space_Converter_out1[0] = Color_Space_Converter_out1_0;
  assign Color_Space_Converter_out1[1] = Color_Space_Converter_out1_1;
  assign Color_Space_Converter_out1[2] = Color_Space_Converter_out1_2;

  assign Data_Type_Conversion2_out1[0] = {2'b0, {Color_Space_Converter_out1[0], 8'b00000000}};
  assign Data_Type_Conversion2_out1[1] = {2'b0, {Color_Space_Converter_out1[1], 8'b00000000}};
  assign Data_Type_Conversion2_out1[2] = {2'b0, {Color_Space_Converter_out1[2], 8'b00000000}};



  K_Means_ip_src_Clustering u_Clustering (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .K_addr(y),  // ufix3
                                          .RGB_pixel_0(Data_Type_Conversion2_out1[0]),  // sfix18_En8
                                          .RGB_pixel_1(Data_Type_Conversion2_out1[1]),  // sfix18_En8
                                          .RGB_pixel_2(Data_Type_Conversion2_out1[2]),  // sfix18_En8
                                          .Ctrl_vStart(Color_Space_Converter_out2_vStart),
                                          .Ctrl_valid(Color_Space_Converter_out2_valid),
                                          .K_out_0(Clustering_out1_0),  // sfix18_En8
                                          .K_out_1(Clustering_out1_1),  // sfix18_En8
                                          .K_out_2(Clustering_out1_2),  // sfix18_En8
                                          .K_out_3(Clustering_out1_3),  // sfix18_En8
                                          .K_out_4(Clustering_out1_4),  // sfix18_En8
                                          .K_out_5(Clustering_out1_5),  // sfix18_En8
                                          .K_out_6(Clustering_out1_6),  // sfix18_En8
                                          .K_out_7(Clustering_out1_7),  // sfix18_En8
                                          .K_out_8(Clustering_out1_8),  // sfix18_En8
                                          .K_out_9(Clustering_out1_9),  // sfix18_En8
                                          .K_out_10(Clustering_out1_10),  // sfix18_En8
                                          .K_out_11(Clustering_out1_11),  // sfix18_En8
                                          .K_out_12(Clustering_out1_12),  // sfix18_En8
                                          .K_out_13(Clustering_out1_13),  // sfix18_En8
                                          .K_out_14(Clustering_out1_14),  // sfix18_En8
                                          .K_out_15(Clustering_out1_15),  // sfix18_En8
                                          .K_out_16(Clustering_out1_16),  // sfix18_En8
                                          .K_out_17(Clustering_out1_17),  // sfix18_En8
                                          .K_out_18(Clustering_out1_18),  // sfix18_En8
                                          .K_out_19(Clustering_out1_19),  // sfix18_En8
                                          .K_out_20(Clustering_out1_20),  // sfix18_En8
                                          .K_out_21(Clustering_out1_21),  // sfix18_En8
                                          .K_out_22(Clustering_out1_22),  // sfix18_En8
                                          .K_out_23(Clustering_out1_23)  // sfix18_En8
                                          );

  K_Means_ip_src_Comparisons u_Comparisons (.RGB_pixel_0(Data_Type_Conversion2_out1[0]),  // sfix18_En8
                                            .RGB_pixel_1(Data_Type_Conversion2_out1[1]),  // sfix18_En8
                                            .RGB_pixel_2(Data_Type_Conversion2_out1[2]),  // sfix18_En8
                                            .Ks_0(Clustering_out1_0),  // sfix18_En8
                                            .Ks_1(Clustering_out1_1),  // sfix18_En8
                                            .Ks_2(Clustering_out1_2),  // sfix18_En8
                                            .Ks_3(Clustering_out1_3),  // sfix18_En8
                                            .Ks_4(Clustering_out1_4),  // sfix18_En8
                                            .Ks_5(Clustering_out1_5),  // sfix18_En8
                                            .Ks_6(Clustering_out1_6),  // sfix18_En8
                                            .Ks_7(Clustering_out1_7),  // sfix18_En8
                                            .Ks_8(Clustering_out1_8),  // sfix18_En8
                                            .Ks_9(Clustering_out1_9),  // sfix18_En8
                                            .Ks_10(Clustering_out1_10),  // sfix18_En8
                                            .Ks_11(Clustering_out1_11),  // sfix18_En8
                                            .Ks_12(Clustering_out1_12),  // sfix18_En8
                                            .Ks_13(Clustering_out1_13),  // sfix18_En8
                                            .Ks_14(Clustering_out1_14),  // sfix18_En8
                                            .Ks_15(Clustering_out1_15),  // sfix18_En8
                                            .Ks_16(Clustering_out1_16),  // sfix18_En8
                                            .Ks_17(Clustering_out1_17),  // sfix18_En8
                                            .Ks_18(Clustering_out1_18),  // sfix18_En8
                                            .Ks_19(Clustering_out1_19),  // sfix18_En8
                                            .Ks_20(Clustering_out1_20),  // sfix18_En8
                                            .Ks_21(Clustering_out1_21),  // sfix18_En8
                                            .Ks_22(Clustering_out1_22),  // sfix18_En8
                                            .Ks_23(Clustering_out1_23),  // sfix18_En8
                                            .K_out_0(Comparisons_out1_0),  // sfix18_En8
                                            .K_out_1(Comparisons_out1_1),  // sfix18_En8
                                            .K_out_2(Comparisons_out1_2),  // sfix18_En8
                                            .Address(y)  // ufix3
                                            );

  assign Comparisons_out1[0] = Comparisons_out1_0;
  assign Comparisons_out1[1] = Comparisons_out1_1;
  assign Comparisons_out1[2] = Comparisons_out1_2;

  assign Data_Type_Conversion1_out1[0] = Comparisons_out1[0][15:8] + Comparisons_out1[0][7];
  assign Data_Type_Conversion1_out1[1] = Comparisons_out1[1][15:8] + Comparisons_out1[1][7];
  assign Data_Type_Conversion1_out1[2] = Comparisons_out1[2][15:8] + Comparisons_out1[2][7];



  K_Means_ip_src_Color_Space_Converter1 u_Color_Space_Converter1 (.clk(clk),
                                                                  .reset(reset),
                                                                  .enb(enb),
                                                                  .in0_0(Data_Type_Conversion1_out1[0]),  // uint8
                                                                  .in0_1(Data_Type_Conversion1_out1[1]),  // uint8
                                                                  .in0_2(Data_Type_Conversion1_out1[2]),  // uint8
                                                                  .in1_hStart(Color_Space_Converter_out2_hStart),
                                                                  .in1_hEnd(Color_Space_Converter_out2_hEnd),
                                                                  .in1_vStart(Color_Space_Converter_out2_vStart),
                                                                  .in1_vEnd(Color_Space_Converter_out2_vEnd),
                                                                  .in1_valid(Color_Space_Converter_out2_valid),
                                                                  .out0_0(Color_Space_Converter1_out1_0),  // uint8
                                                                  .out0_1(Color_Space_Converter1_out1_1),  // uint8
                                                                  .out0_2(Color_Space_Converter1_out1_2),  // uint8
                                                                  .out1_hStart(Color_Space_Converter1_out2_hStart),
                                                                  .out1_hEnd(Color_Space_Converter1_out2_hEnd),
                                                                  .out1_vStart(Color_Space_Converter1_out2_vStart),
                                                                  .out1_vEnd(Color_Space_Converter1_out2_vEnd),
                                                                  .out1_valid(Color_Space_Converter1_out2_valid)
                                                                  );

  assign pixelOut_0 = Color_Space_Converter1_out1_0;

  assign pixelOut_1 = Color_Space_Converter1_out1_1;

  assign pixelOut_2 = Color_Space_Converter1_out1_2;

  assign ctrlOut_hStart = Color_Space_Converter1_out2_hStart;

  assign ctrlOut_hEnd = Color_Space_Converter1_out2_hEnd;

  assign ctrlOut_vStart = Color_Space_Converter1_out2_vStart;

  assign ctrlOut_vEnd = Color_Space_Converter1_out2_vEnd;

  assign ctrlOut_valid = Color_Space_Converter1_out2_valid;

endmodule  // K_Means_ip_src_K_Means

